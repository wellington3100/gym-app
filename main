import tkinter as tk
from tkinter import messagebox, simpledialog, ttk
import sys
from gym_mysql_database import GymMySQLDatabase

class GymApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Planet Fitness")
        self.root.geometry("400x500")
        self.root.configure(bg='#A4278D')
        self.root.resizable(False, False)
        
        # Centrar la ventana
        self.center_window()
        
        # Inicializar base de datos
        try:
            self.db = GymMySQLDatabase(
                host='localhost',
                username='root',
                password='',
                database='gymapp'
            )
            print("Conexión a base de datos establecida")
        except Exception as e:
            messagebox.showerror("Error de Base de Datos", 
                               f"No se pudo conectar a la base de datos:\n{str(e)}")
            sys.exit()
        
        # Usuario actual
        self.current_user = None
        
        # Mostrar pantalla de login
        self.show_login_screen()
    
    def center_window(self):
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
    
    def clear_screen(self):
        for widget in self.root.winfo_children():
            widget.destroy()
    
    def show_login_screen(self):
        self.clear_screen()
        
        # Título
        title_label = tk.Label(
            self.root, 
            text="Planet Fitness", 
            font=("Arial", 24, "bold"),
            fg="white",
            bg='#A4278D'
        )
        title_label.pack(pady=40)
        
        # Subtítulo
        subtitle_label = tk.Label(
            self.root, 
            text="Sistema de Gestión de Gimnasio", 
            font=("Arial", 12),
            fg="#bdc3c7",
            bg='#A4278D'
        )
        subtitle_label.pack(pady=10)
        
        # Frame para los botones
        button_frame = tk.Frame(self.root, bg='#A4278D')
        button_frame.pack(pady=50)
        
        # Botón 1: Iniciar Usuario
        login_btn = tk.Button(
            button_frame,
            text="Iniciar Usuario",
            font=("Arial", 14, "bold"),
            bg="#F9F72E",
            fg="black",
            width=20,
            height=2,
            command=self.login_user,
            cursor="hand2"
        )
        login_btn.pack(pady=10)
        
        # Botón 2: Crear Usuario
        create_btn = tk.Button(
            button_frame,
            text="Crear Usuario",
            font=("Arial", 14, "bold"),
            bg="#F9F72E",
            fg="black",
            width=20,
            height=2,
            command=self.create_user,
            cursor="hand2"
        )
        create_btn.pack(pady=10)
        
        # Botón 3: Ver Máquinas
        machines_btn = tk.Button(
            button_frame,
            text="Ver Máquinas",
            font=("Arial", 14, "bold"),
            bg="#F9F72E",
            fg="black",
            width=20,
            height=2,
            command=self.show_machines_screen,
            cursor="hand2"
        )
        machines_btn.pack(pady=10)
        
        # Botón 4: Cerrar Programa
        exit_btn = tk.Button(
            button_frame,
            text="Cerrar Programa",
            font=("Arial", 14, "bold"),
            bg="#F9F72E",
            fg="black",
            width=20,
            height=2,
            command=self.close_program,
            cursor="hand2"
        )
        exit_btn.pack(pady=10)
    
    def login_user(self):
        # Crear ventana de login
        login_window = tk.Toplevel(self.root)
        login_window.title("Iniciar Sesión")
        login_window.geometry("350x250")
        login_window.configure(bg='#A4278D')
        login_window.resizable(False, False)
        
        # Centrar ventana de login
        login_window.transient(self.root)
        login_window.grab_set()
        
        # Título
        title = tk.Label(
            login_window,
            text="Iniciar Sesión",
            font=("Arial", 16, "bold"),
            fg="white",
            bg='#A4278D'
        )
        title.pack(pady=20)
        
        # Campo Usuario
        tk.Label(
            login_window,
            text="Usuario:",
            font=("Arial", 12),
            fg="white",
            bg='#A4278D'
        ).pack(pady=5)
        
        username_entry = tk.Entry(
            login_window,
            font=("Arial", 12),
            width=25
        )
        username_entry.pack(pady=5)
        
        # Campo Contraseña
        tk.Label(
            login_window,
            text="Contraseña:",
            font=("Arial", 12),
            fg="white",
            bg='#A4278D'
        ).pack(pady=5)
        
        password_entry = tk.Entry(
            login_window,
            font=("Arial", 12),
            width=25,
            show="*"
        )
        password_entry.pack(pady=5)
        
        # Función para verificar login
        def verify_login():
            username = username_entry.get().strip()
            password = password_entry.get().strip()
            
            if not username or not password:
                messagebox.showerror("Error", "Por favor complete todos los campos")
                return
            
            # Verificar credenciales en la base de datos
            success, result = self.db.verify_user(username, password)
            
            if success:
                self.current_user = result
                messagebox.showinfo("Éxito", f"¡Bienvenido, {result['nombre_completo']}!")
                login_window.destroy()
                self.show_main_screen()
            else:
                messagebox.showerror("Error", result)
        
        # Botón de login
        login_btn = tk.Button(
            login_window,
            text="Iniciar Sesión",
            font=("Arial", 12, "bold"),
            bg="#A4278D",
            fg="white",
            command=verify_login,
            cursor="hand2"
        )
        login_btn.pack(pady=20)
        
        # Enfocar en el campo de usuario
        username_entry.focus()
        
        # Permitir login con Enter
        login_window.bind('<Return>', lambda event: verify_login())
    
    def create_user(self):
        # Crear ventana de registro
        register_window = tk.Toplevel(self.root)
        register_window.title("Crear Usuario")
        register_window.geometry("400x350")
        register_window.configure(bg='#A4278D')
        register_window.resizable(False, False)
        
        # Centrar ventana
        register_window.transient(self.root)
        register_window.grab_set()
        
        # Título
        title = tk.Label(
            register_window,
            text="Crear Nuevo Usuario",
            font=("Arial", 16, "bold"),
            fg="white",
            bg='#A4278D'
        )
        title.pack(pady=20)
        
        # Campo Nombre Completo
        tk.Label(
            register_window,
            text="Nombre Completo:",
            font=("Arial", 12),
            fg="white",
            bg='#A4278D'
        ).pack(pady=5)
        
        fullname_entry = tk.Entry(
            register_window,
            font=("Arial", 12),
            width=30
        )
        fullname_entry.pack(pady=5)
        
        # Campo Nombre de Usuario
        tk.Label(
            register_window,
            text="Nombre de Usuario:",
            font=("Arial", 12),
            fg="white",
            bg='#A4278D'
        ).pack(pady=5)
        
        username_entry = tk.Entry(
            register_window,
            font=("Arial", 12),
            width=30
        )
        username_entry.pack(pady=5)
        
        # Campo Contraseña
        tk.Label(
            register_window,
            text="Contraseña:",
            font=("Arial", 12),
            fg="white",
            bg='#A4278D'
        ).pack(pady=5)
        
        password_entry = tk.Entry(
            register_window,
            font=("Arial", 12),
            width=30,
            show="*"
        )
        password_entry.pack(pady=5)
        
        # Función para crear usuario
        def create_new_user():
            full_name = fullname_entry.get().strip()
            username = username_entry.get().strip()
            password = password_entry.get().strip()
            
            if not full_name or not username or not password:
                messagebox.showerror("Error", "Por favor complete todos los campos")
                return
            
            if len(password) < 4:
                messagebox.showerror("Error", "La contraseña debe tener al menos 4 caracteres")
                return
            
            # Crear usuario en la base de datos
            success, message = self.db.create_user(full_name, username, password)
            
            if success:
                messagebox.showinfo("Éxito", message)
                register_window.destroy()
            else:
                messagebox.showerror("Error", message)
        
        # Botón de registro
        register_btn = tk.Button(
            register_window,
            text="Crear Usuario",
            font=("Arial", 12, "bold"),
            bg="#A4278D",
            fg="white",
            command=create_new_user,
            cursor="hand2"
        )
        register_btn.pack(pady=20)
        
        # Enfocar en el primer campo
        fullname_entry.focus()
    
    def show_main_screen(self):
        self.clear_screen()
        
        # Título
        title_label = tk.Label(
            self.root, 
            text="PANTALLA PRINCIPAL", 
            font=("Arial", 20, "bold"),
            fg="white",
            bg='#A4278D'
        )
        title_label.pack(pady=30)
        
        # Mensaje de bienvenida
        welcome_label = tk.Label(
            self.root, 
            text=f"Bienvenido, {self.current_user['nombre_completo']}", 
            font=("Arial", 14),
            fg="#bdc3c7",
            bg='#A4278D'
        )
        welcome_label.pack(pady=20)
        
        # Frame para botones de funcionalidades
        functions_frame = tk.Frame(self.root, bg='#A4278D')
        functions_frame.pack(pady=30)
        
        # Botón Ver Máquinas
        machines_btn = tk.Button(
            functions_frame,
            text="Gestionar Máquinas",
            font=("Arial", 12, "bold"),
            bg="#F9F72E",
            fg="black",
            width=18,
            height=2,
            command=self.show_machines_screen,
            cursor="hand2"
        )
        machines_btn.pack(pady=10)
        
        # Botón Ver Usuarios (solo si es admin)
        if self.current_user['username'] == 'admin':
            users_btn = tk.Button(
                functions_frame,
                text="Ver Usuarios",
                font=("Arial", 12, "bold"),
                bg="#F9F72E",
                fg="black",
                width=18,
                height=2,
                command=self.show_users_screen,
                cursor="hand2"
            )
            users_btn.pack(pady=10)
        
        # Botón para cerrar sesión
        logout_btn = tk.Button(
            self.root,
            text="Cerrar Sesión",
            font=("Arial", 12, "bold"),
            bg="#A4278D",
            fg="white",
            width=15,
            height=2,
            command=self.logout,
            cursor="hand2"
        )
        logout_btn.pack(side=tk.BOTTOM, pady=20)
    
    def show_machines_screen(self):
        # Crear ventana de máquinas
        machines_window = tk.Toplevel(self.root)
        machines_window.title("Gestión de Máquinas")
        machines_window.geometry("800x500")
        machines_window.configure(bg='#A4278D')
        
        # Título
        title = tk.Label(
            machines_window,
            text="Gestión de Máquinas",
            font=("Arial", 18, "bold"),
            fg="white",
            bg='#A4278D'
        )
        title.pack(pady=20)
        
        # Frame para la tabla
        table_frame = tk.Frame(machines_window, bg='white')
        table_frame.pack(pady=10, padx=20, fill=tk.BOTH, expand=True)
        
        # Crear Treeview para mostrar máquinas
        columns = ('ID', 'Nombre', 'Tipo', 'Estado', 'Descripción')
        tree = ttk.Treeview(table_frame, columns=columns, show='headings')
        
        # Definir encabezados
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=150)
        
        # Cargar datos de máquinas
        machines = self.db.get_machines()
        for machine in machines:
            tree.insert('', tk.END, values=machine)
        
        tree.pack(fill=tk.BOTH, expand=True)
        
        # Frame para botones
        button_frame = tk.Frame(machines_window, bg='#A4278D')
        button_frame.pack(pady=20)
        
        # Botón Agregar Máquina
        def add_machine():
            self.add_machine_dialog()
            # Actualizar la tabla
            for item in tree.get_children():
                tree.delete(item)
            machines = self.db.get_machines()
            for machine in machines:
                tree.insert('', tk.END, values=machine)
        
        add_btn = tk.Button(
            button_frame,
            text="Agregar Máquina",
            font=("Arial", 10, "bold"),
            bg="#F9F72E",
            fg="black",
            command=add_machine,
            cursor="hand2"
        )
        add_btn.pack(side=tk.LEFT, padx=10)
        
        # Botón Cerrar
        close_btn = tk.Button(
            button_frame,
            text="Cerrar",
            font=("Arial", 10, "bold"),
            bg="#A4278D",
            fg="white",
            command=machines_window.destroy,
            cursor="hand2"
        )
        close_btn.pack(side=tk.LEFT, padx=10)
    
    def add_machine_dialog(self):
        # Diálogo para agregar máquina
        dialog = tk.Toplevel(self.root)
        dialog.title("Agregar Máquina")
        dialog.geometry("400x300")
        dialog.configure(bg='#A4278D')
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Campos
        tk.Label(dialog, text="Nombre:", fg="white", bg='#A4278D', font=("Arial", 12)).pack(pady=5)
        name_entry = tk.Entry(dialog, font=("Arial", 12), width=30)
        name_entry.pack(pady=5)
        
        tk.Label(dialog, text="Tipo:", fg="white", bg='#A4278D', font=("Arial", 12)).pack(pady=5)
        type_entry = tk.Entry(dialog, font=("Arial", 12), width=30)
        type_entry.pack(pady=5)
        
        tk.Label(dialog, text="Descripción:", fg="white", bg='#A4278D', font=("Arial", 12)).pack(pady=5)
        desc_text = tk.Text(dialog, font=("Arial", 10), width=35, height=4)
        desc_text.pack(pady=5)
        
        def save_machine():
            name = name_entry.get().strip()
            machine_type = type_entry.get().strip()
            description = desc_text.get("1.0", tk.END).strip()
            
            if name and machine_type:
                success, message = self.db.add_machine(name, machine_type, description)
                if success:
                    messagebox.showinfo("Éxito", message)
                    dialog.destroy()
                else:
                    messagebox.showerror("Error", message)
            else:
                messagebox.showerror("Error", "Complete los campos obligatorios")
        
        tk.Button(
            dialog,
            text="Guardar",
            font=("Arial", 12, "bold"),
            bg="#F9F72E",
            fg="black",
            command=save_machine,
            cursor="hand2"
        ).pack(pady=20)
    
    def show_users_screen(self):
        # Crear ventana de usuarios
        users_window = tk.Toplevel(self.root)
        users_window.title("Lista de Usuarios")
        users_window.geometry("600x400")
        users_window.configure(bg='#A4278D')
        
        # Título
        title = tk.Label(
            users_window,
            text="Usuarios Registrados",
            font=("Arial", 18, "bold"),
            fg="white",
            bg='#A4278D'
        )
        title.pack(pady=20)
        
        # Frame para la tabla
        table_frame = tk.Frame(users_window, bg='white')
        table_frame.pack(pady=10, padx=20, fill=tk.BOTH, expand=True)
        
        # Crear Treeview
        columns = ('ID', 'Nombre Completo', 'Usuario', 'Fecha Registro')
        tree = ttk.Treeview(table_frame, columns=columns, show='headings')
        
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=140)
        
        # Cargar usuarios
        users = self.db.get_all_users()
        for user in users:
            tree.insert('', tk.END, values=user)
        
        tree.pack(fill=tk.BOTH, expand=True)
        
        # Botón cerrar
        tk.Button(
            users_window,
            text="Cerrar",
            font=("Arial", 12, "bold"),
            bg="#A4278D",
            fg="white",
            command=users_window.destroy,
            cursor="hand2"
        ).pack(pady=20)
    
    def logout(self):
        self.current_user = None
        self.show_login_screen()
    
    def close_program(self):
        result = messagebox.askyesno("Confirmar", "¿Estás seguro de que quieres cerrar el programa?")
        if result:
            # Cerrar conexión a base de datos
            if hasattr(self, 'db'):
                self.db.close_connection()
            
            messagebox.showinfo("Despedida", "Esperamos volver a verte pronto")
            self.root.quit()
            sys.exit()
    
    def run(self):
        self.root.protocol("WM_DELETE_WINDOW", self.close_program)
        self.root.mainloop()

if __name__ == "__main__":
    app = GymApp()
    app.run()
